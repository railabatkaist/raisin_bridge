template <typename T_ROS, typename T_RAISIN>
void register_ros2_to_raisin_msg(BridgeNode * bridgeNode, std::string topic_name){
    auto raisin_publisher = bridgeNode->raisin_node_->createPublisher<T_RAISIN>(topic_name);
    bridgeNode->raisin_publishers[topic_name] = raisin_publisher;
    bridgeNode->ros2_subscriptions[topic_name] = bridgeNode->create_subscription<T_ROS>(
        topic_name, rclcpp::QoS(3).best_effort(),
        [raisin_publisher](std::shared_ptr<T_ROS> msg) {
            raisin_publisher->publish(to_raisin(*msg));  // Publish the same message
        }
    );
}

template <typename T_ROS, typename T_RAISIN>
void register_raisin_to_ros2_msg(BridgeNode * bridgeNode, std::string topic_name){
    auto ros2_publisher = bridgeNode->create_publisher<T_ROS>(topic_name, rclcpp::QoS(3).best_effort());
    bridgeNode->ros2_publishers[topic_name] = ros2_publisher;
    bridgeNode->raisin_subscribers[topic_name] = bridgeNode->raisin_node_->createSubscriber<T_RAISIN>(
        topic_name, bridgeNode->connection_,
        std::bind([ros2_publisher](std::shared_ptr<T_RAISIN> msg) {
          ros2_publisher->publish(to_ros(*msg));  // Publish the same message
        }, _1)
    );
}

template <typename T_ROS, typename T_RAISIN>
void register_ros2_to_raisin_srv(BridgeNode * bridgeNode, std::string service_name){
    // auto raisin_service = bridgeNode->raisin_node_->createService<T_RAISIN>(service_name);
    // bridgeNode->raisin_services[service_name] = raisin_service;
    // bridgeNode->ros2_services[service_name] = bridgeNode->create_service<T_ROS>(
    //     service_name, rclcpp::QoS(3).best_effort(),
    //     [raisin_service](std::shared_ptr<T_ROS> msg) {
    //         raisin_service->publish(to_raisin(*msg));  // Publish the same message
    //     }
    // );
}

template <typename T_ROS, typename T_RAISIN>
void register_raisin_to_ros2_srv(BridgeNode * bridgeNode, std::string service_name){
    // auto ros2_service = bridgeNode->create_service<T_ROS>(service_name, rclcpp::QoS(3).best_effort());
    // bridgeNode->ros2_services[service_name] = ros2_service;
    // bridgeNode->raisin_services[service_name] = bridgeNode->raisin_node_->createService<T_RAISIN>(
    //     service_name, bridgeNode->connection_,
    //     std::bind([ros2_service](std::shared_ptr<T_RAISIN> msg) {
    //       ros2_service->publish(to_ros(*msg));  // Publish the same message
    //     }, _1)
    // );
}

